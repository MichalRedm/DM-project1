import pandas as pd
from sklearn.decomposition import PCA
from umap.umap_ import UMAP
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis as LDA

def feature_extraction(
        df: pd.DataFrame,
        target: str,
        n_components: int,
        method: str,
        ignore_columns = [],
        UMAP_n_neighbors: int = 10,
        UMAP_min_dist: int = 0.2
    ) -> pd.DataFrame:
    """
    Performs feature extraction on a provided dataset.

    Parameters
    ----------
    df : pd.DataFrame
        Dataset in the format of a pandas dataframe.

    target : str
        Name of the target column (the one for which the value
        shall be predicted).

    n_components : int
        Number of components to be generated by the feature
        etraction algorithm.

    method : str
        Name of the algorithm that shall be used for feature
        extraction. The following algorithms are supported:
        - `PCA` (Principal Component Analysis),
        - `UMAP` (Uniform Manifold Approximation and Projection),
        - `LDA` (Linear Discriminant Analysis).

    UMAP_n_neighbors : int
        Parameter for the UMAP algorithm.

    UMAP_min_dist : int
        Parameter for the UMAP algorithm.

    Returns
    -------
    Pandas dataframe with columns `component{i}` for `i` from `0` up to
    `n_components - 1`, contating components obtained by the feature
    extraction algorithm, and the target column with its original name.

    Throws
    ------
    ValueError
        When an unsupported feature extraction method is provided.
    """
    X, X_ignored, y = df.drop([target] + ignore_columns, axis=1), df[ignore_columns], df[target]
    if method == "PCA":
        X_new = PCA(n_components=n_components).fit_transform(X)
    elif method == "UMAP":
        X_new = UMAP(
            n_neighbors=UMAP_n_neighbors,
            n_components=n_components,
            min_dist=UMAP_min_dist
        ).fit_transform(X)
    elif method == "LDA":
        X_new = LDA(n_components=n_components).fit_transform(X, y)
    else:
        raise ValueError(f"Unsupported feature extraction method: '{method}'.")
    result = pd.concat([
        pd.DataFrame(X_new, columns=[f"component{i}" for i in range(n_components)]),
        X_ignored
    ], axis=1)
    result.insert(len(result.columns), target, y)
    return result

# Usage exaple.

def main() -> None:
    df = pd.read_csv("./CarsData.csv")
    df_new = feature_extraction(df, "price", 4, "LDA", ["model", "transmission", "fuelType", "Manufacturer"])
    print(df_new.head())

if __name__ == "__main__":
    main()
